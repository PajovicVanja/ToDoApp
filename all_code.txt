App.tsx:

import React from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { TaskProvider } from './src/context/TaskContext'; // Ensure named import
import AppNavigator from './src/navigation/AppNavigator';
import { initializeApp, getApps } from '@react-native-firebase/app';

const firebaseConfig = {
  apiKey: "AIzaSyCAd3-zsvGIZEvx_swr42ouiReYf5c9dQo",
  authDomain: "to-do-app-fb6f9.firebaseapp.com",
  projectId: "to-do-app-fb6f9",
  storageBucket: "to-do-app-fb6f9.firebasestorage.app",
  messagingSenderId: "647438249977",
  appId: "1:647438249977:android:5e5f5b9b4069c1e1be5728",
};

if (getApps().length === 0) {
  initializeApp(firebaseConfig);
}

console.log('Firebase apps:', getApps());

const App: React.FC = () => {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <TaskProvider> 
        <AppNavigator /> {/* Ensure AppNavigator is inside TaskProvider */}
      </TaskProvider>
    </GestureHandlerRootView>
  );
};

export default App;


--------------------------------------------------------------------------------

src\components\TaskItem.tsx:

import React from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { Task } from '../types/taskTypes';
import globalStyles from '../styles/globalStyles';

interface TaskItemProps {
  task: Task;
  onPress: () => void;
}

const TaskItem: React.FC<TaskItemProps> = ({ task, onPress }) => {
  return (
    <TouchableOpacity onPress={onPress}>
      <View style={globalStyles.taskItem}>
        <Text style={globalStyles.taskTitle}>{task.title}</Text>
        <Text style={globalStyles.taskDueDate}>
          Due: {task.dueDate.toLocaleDateString()}
        </Text>
      </View>
    </TouchableOpacity>
  );
};

export default TaskItem;


--------------------------------------------------------------------------------

src\context\TaskContext.tsx:

import React, { createContext, useState, ReactNode, useContext, useEffect } from 'react';
import { getAuth, onAuthStateChanged, FirebaseAuthTypes } from '@react-native-firebase/auth';
import { getFirestore, collection, query, where, onSnapshot, addDoc, doc, deleteDoc, Timestamp } from '@react-native-firebase/firestore';
import { getApp } from '@react-native-firebase/app';

export interface Task {
  id: string;
  title: string;
  description: string;
  category: string;
  dueDate: Date;
  reminderDate: Date;
}

interface TaskContextProps {
  tasks: Task[];
  addTask: (task: Omit<Task, 'id'>) => Promise<void>;
  deleteTask: (id: string) => Promise<void>;
}

const TaskContext = createContext<TaskContextProps | undefined>(undefined);

export const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const authInstance = getAuth(getApp());
  const [currentUser, setCurrentUser] = useState(authInstance.currentUser);

  useEffect(() => {
    const unsubscribeAuth = onAuthStateChanged(authInstance, (user: FirebaseAuthTypes.User | null) => {
      setCurrentUser(user);
    });
    return unsubscribeAuth;
  }, [authInstance]);

  useEffect(() => {
    if (!currentUser) return;

    const db = getFirestore(getApp());
    const tasksCollection = collection(db, 'tasks');
    const q = query(tasksCollection, where('userId', '==', currentUser.uid));
    const unsubscribe = onSnapshot(q, snapshot => {
      const fetchedTasks: Task[] = snapshot.docs.map(docSnap => {
        const data = docSnap.data();
        return {
          id: docSnap.id,
          title: data.title,
          description: data.description,
          category: data.category,
          dueDate: data.dueDate.toDate(),
          reminderDate: data.reminderDate.toDate(),
        };
      });
      setTasks(fetchedTasks);
    });

    return () => unsubscribe();
  }, [currentUser]);

  const addTask = async (task: Omit<Task, 'id'>) => {
    if (!currentUser) return;
    try {
      const db = getFirestore(getApp());
      const tasksCollection = collection(db, 'tasks');
      await addDoc(tasksCollection, {
        ...task,
        userId: currentUser.uid,
        dueDate: Timestamp.fromDate(task.dueDate),
        reminderDate: Timestamp.fromDate(task.reminderDate),
      });
    } catch (error) {
      console.error('Error adding task:', error);
    }
  };

  const deleteTask = async (id: string) => {
    try {
      const db = getFirestore(getApp());
      const taskDoc = doc(db, 'tasks', id);
      await deleteDoc(taskDoc);
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  return (
    <TaskContext.Provider value={{ tasks, addTask, deleteTask }}>
      {children}
    </TaskContext.Provider>
  );
};

export const useTaskContext = () => {
  const context = useContext(TaskContext);
  if (!context) {
    throw new Error('useTaskContext must be used within a TaskProvider');
  }
  return context;
};


--------------------------------------------------------------------------------

src\navigation\AppNavigator.tsx:

// src/navigation/AppNavigator.tsx
import React from 'react';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { NavigationContainer } from '@react-navigation/native';
import LoginScreen from '../screens/LoginScreen';
import TaskListScreen from '../screens/TaskListScreen';
import TaskDetailsScreen from '../screens/TaskDetailsScreen';
import AddTaskScreen from '../screens/AddTaskScreen';
import { RootStackParamList } from '../types/taskTypes';

const Stack = createNativeStackNavigator<RootStackParamList>();

const AppNavigator: React.FC = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login">
        <Stack.Screen
          name="Login"
          component={LoginScreen}
          options={{ headerShown: false }} // Hide header on login
        />
        <Stack.Screen name="TaskList" component={TaskListScreen} />
        <Stack.Screen name="TaskDetails" component={TaskDetailsScreen} />
        <Stack.Screen name="AddTask" component={AddTaskScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator;


--------------------------------------------------------------------------------

src\screens\AddTaskScreen.tsx:

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { Picker } from '@react-native-picker/picker';
import DatePicker from 'react-native-date-picker';
import { useTaskContext } from '../context/TaskContext';
import { RootStackParamList } from '../types/taskTypes';
import globalStyles from '../styles/globalStyles';

type Props = NativeStackScreenProps<RootStackParamList, 'AddTask'>;

const AddTaskScreen: React.FC<Props> = ({ navigation }) => {
  const { addTask } = useTaskContext();

  const [title, setTitle] = useState<string>('');
  const [description, setDescription] = useState<string>('');
  const [category, setCategory] = useState<string>('Work');
  const [dueDate, setDueDate] = useState<Date>(new Date());
  const [reminderDate, setReminderDate] = useState<Date>(new Date());
  const [openDue, setOpenDue] = useState<boolean>(false);
  const [openReminder, setOpenReminder] = useState<boolean>(false);

  const handleAddTask = async () => {
    if (!title.trim()) {
      Alert.alert('Please enter a task name');
      return;
    }
  
    const newTask = {
      title,
      description,
      category,
      dueDate,
      reminderDate,
    };
  
    await addTask(newTask);
    navigation.goBack();
  };
  

  return (
    <View style={globalStyles.container}>
      <Text style={globalStyles.header}>Add New Task</Text>

      <TextInput
        placeholder="Task Name"
        value={title}
        onChangeText={setTitle}
        style={globalStyles.input}
      />
      
      <TextInput
        placeholder="Task Description"
        value={description}
        onChangeText={setDescription}
        style={[globalStyles.input, { height: 80 }]}
        multiline
      />

      <Text style={globalStyles.label}>Category:</Text>
      <View style={globalStyles.pickerContainer}>
        <Picker selectedValue={category} onValueChange={(itemValue) => setCategory(itemValue)}>
          <Picker.Item label="Work" value="Work" />
          <Picker.Item label="Personal" value="Personal" />
          <Picker.Item label="Other" value="Other" />
        </Picker>
      </View>

      <TouchableOpacity style={globalStyles.dateButton} onPress={() => setOpenDue(true)}>
        <Text style={globalStyles.dateButtonText}>Select Due Date</Text>
      </TouchableOpacity>
      <DatePicker
        modal
        open={openDue}
        date={dueDate}
        onConfirm={(date) => {
          setOpenDue(false);
          setDueDate(date);
        }}
        onCancel={() => setOpenDue(false)}
        mode="date"
      />

      <TouchableOpacity style={globalStyles.dateButton} onPress={() => setOpenReminder(true)}>
        <Text style={globalStyles.dateButtonText}>Select Reminder Date</Text>
      </TouchableOpacity>
      <DatePicker
        modal
        open={openReminder}
        date={reminderDate}
        onConfirm={(date) => {
          setOpenReminder(false);
          setReminderDate(date);
        }}
        onCancel={() => setOpenReminder(false)}
        mode="date"
      />

      <TouchableOpacity style={globalStyles.button} onPress={handleAddTask}>
        <Text style={globalStyles.buttonText}>Add Task</Text>
      </TouchableOpacity>
    </View>
  );
};

export default AddTaskScreen;


--------------------------------------------------------------------------------

src\screens\LoginScreen.tsx:

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, Alert } from 'react-native';
import auth from '@react-native-firebase/auth';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { RootStackParamList } from '../types/taskTypes';
import globalStyles from '../styles/globalStyles';

type Props = NativeStackScreenProps<RootStackParamList, 'Login'>;

const LoginScreen: React.FC<Props> = ({ navigation }) => {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);

  // Check authentication state and redirect if logged in
  useEffect(() => {
    const unsubscribe = auth().onAuthStateChanged(user => {
      if (user) {
        navigation.replace('TaskList');
      }
    });
    return unsubscribe;
  }, [navigation]);

  // Handle Email/Password Login
  const handleEmailPasswordLogin = async () => {
    setLoading(true);
    try {
      await auth().signInWithEmailAndPassword(email, password);
      Alert.alert("Success", "Logged in successfully!");
    } catch (error: any) {
      Alert.alert("Login Error", error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={globalStyles.container}>
      <Text style={globalStyles.header}>Login</Text>

      <TextInput
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
        style={globalStyles.input}
        keyboardType="email-address"
        autoCapitalize="none"
      />
      
      <TextInput
        placeholder="Password"
        value={password}
        onChangeText={setPassword}
        style={globalStyles.input}
        secureTextEntry
      />

      <TouchableOpacity
        style={globalStyles.button}
        onPress={handleEmailPasswordLogin}
        disabled={loading}
      >
        <Text style={globalStyles.buttonText}>Login with Email</Text>
      </TouchableOpacity>
    </View>
  );
};

export default LoginScreen;


--------------------------------------------------------------------------------

src\screens\TaskDetailsScreen.tsx:

import React from 'react';
import { View, Text } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { RootStackParamList } from '../types/taskTypes';
import globalStyles from '../styles/globalStyles';

type Props = NativeStackScreenProps<RootStackParamList, 'TaskDetails'>;

const TaskDetailsScreen: React.FC<Props> = ({ route }) => {
  const { task } = route.params;
  const dueDate = new Date(task.dueDate);
  const reminderDate = new Date(task.reminderDate);

  return (
    <View style={globalStyles.container}>
      <Text style={globalStyles.detailTitle}>{task.title}</Text>
      <Text style={globalStyles.detailText}>Description: {task.description}</Text>
      <Text style={globalStyles.detailText}>Category: {task.category}</Text>
      <Text style={globalStyles.detailText}>Due Date: {dueDate.toLocaleDateString()}</Text>
      <Text style={globalStyles.detailText}>Reminder Date: {reminderDate.toLocaleDateString()}</Text>
    </View>
  );
};

export default TaskDetailsScreen;


--------------------------------------------------------------------------------

src\screens\TaskListScreen.tsx:

import React, { useState, useLayoutEffect } from 'react';
import { View, Text, TouchableOpacity, FlatList } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import auth from '@react-native-firebase/auth';
import { RootStackParamList, Task } from '../types/taskTypes';
import TaskItem from '../components/TaskItem';
import globalStyles from '../styles/globalStyles';
import { Swipeable } from 'react-native-gesture-handler';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import { useTaskContext } from '../context/TaskContext';

type Props = NativeStackScreenProps<RootStackParamList, 'TaskList'>;

const TaskListScreen: React.FC<Props> = ({ navigation }) => {
  const { tasks, deleteTask } = useTaskContext();
  const [taskToDelete, setTaskToDelete] = useState<Task | null>(null);

  useLayoutEffect(() => {
    navigation.setOptions({
      headerRight: () => (
        <TouchableOpacity onPress={handleLogout} style={{ marginRight: 10 }}>
          <Text style={{ color: 'red' }}>Logout</Text>
        </TouchableOpacity>
      ),
    });
  }, [navigation]);

  const handleLogout = async () => {
    try {
      await auth().signOut();
      navigation.replace('Login');
    } catch (error) {
      console.error('Logout Error:', error);
    }
  };

  const confirmDeleteTask = async () => {
    if (taskToDelete) {
      await deleteTask(taskToDelete.id.toString());
      setTaskToDelete(null);
    }
  };

  const renderRightActions = (task: Task) => {
    return (
      <TouchableOpacity
        style={globalStyles.swipeDeleteContainer}
        onPress={() => setTaskToDelete(task)}
      >
        <MaterialIcons name="delete" size={28} color="white" />
      </TouchableOpacity>
    );
  };

  return (
    <View style={globalStyles.container}>
      <Text style={globalStyles.header}>Your Tasks</Text>
      <FlatList
        data={tasks}
        keyExtractor={(item) => item.id.toString()}
        contentContainerStyle={{ paddingBottom: 80 }}
        renderItem={({ item }) => (
          <Swipeable renderRightActions={() => renderRightActions(item)}>
            <TaskItem
              task={item}
              onPress={() =>
                navigation.navigate('TaskDetails', {
                  task: {
                    ...item,
                    dueDate: item.dueDate.toISOString(),
                    reminderDate: item.reminderDate.toISOString(),
                  },
                })
              }
            />
          </Swipeable>
        )}
        ListEmptyComponent={<Text style={globalStyles.emptyText}>No tasks added yet.</Text>}
      />
    </View>
  );
};

export default TaskListScreen;


--------------------------------------------------------------------------------

src\types\taskTypes.ts:

// src/types/taskTypes.ts
export interface Task {
  id: string; // Changed from number to string
  title: string;
  description: string;
  category: string;
  dueDate: Date;
  reminderDate: Date;
}

// Serialized task for navigation
export type SerializedTask = Omit<Task, 'dueDate' | 'reminderDate'> & {
  dueDate: string;
  reminderDate: string;
};

// Add a Login route to the RootStackParamList
export type RootStackParamList = {
  Login: undefined;
  TaskList: undefined;
  TaskDetails: { task: SerializedTask };
  AddTask: undefined;
};


--------------------------------------------------------------------------------

